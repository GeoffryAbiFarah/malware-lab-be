const createError = require('http-errors');
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const fileUpload = require('express-fileupload');
const cors = require('cors');
const spawn = require('child_process').spawn;

const indexRouter = require('./routes/index');
const usersRouter = require('./routes/users');
const fetch = require('node-fetch');

const app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));



//custom
// middle ware
app.use(express.static('public')); //to access the files in public folder
app.use(cors()); // it enables all cors requests
app.use(fileUpload());

// file upload api
app.post('/upload', (req, res) => {

  if (!req.files) {
    return res.status(500).send({ msg: "file is not found" })
  }
  // accessing the file
  const myFile = req.files.file;

  //  mv() method places the file inside public directory
  myFile.mv(`${__dirname}/public/${myFile.name}`, function (err) {
    if (err) {
      console.log(err)
      return res.status(500).send({ msg: "Error occured" });
    }
    // returning the response with file path and name
    return res.send({name: myFile.name, path: `/${myFile.name}`});
  });
})

// static analysis route
//takes the file name as params, call the python script: static_analysis providing the filepath and get a json response with 4 parameters:
// * assembly * entry * functions * pe_sections * malware or not (according to virus total api with kaspersky)
app.get('/static/:fileName', (req, res) => {

  //starts the python script and give it the path of the file to analyze as argument
  const process = spawn('python3',[`${__dirname}/public/script/static_analysis.py`, `${__dirname}/public/${req.params.fileName}`]);

  //when the python script prints a response we get it here
  process.stdout.on('data', function(data) {

    //dividing the data to make it clearer
    const resp = data.toString().substring(0, data.toString().length-1).split("\n");
    for(let i = 0; i<5; ++i){
      resp[i].substring(0, resp[i].toString().length-1);
    }

    const jsonResp = {
      "assembly": resp[0],
      "entry": resp[1],
      "functions": resp[2],
      "pe_sections": resp[3],
      "malware": resp[4]
    }

    //send the response as json to the react app
    res.send(jsonResp);
  })

})

// ml analysis route

app.get('/ml/:fileName', (req, res) => {

  //starts the python script and give it the path of the file to analyze as argument
  const process = spawn('python3',[`${__dirname}/public/script/ml.py`, `${__dirname}/public/${req.params.fileName}`]);

  //when the python script prints a response we get it here
  process.stdout.on('data', function(data) {

    //dividing the data to make it clearer
    const resp = data.toString().split(" ");
    const result = resp[resp.length-1].split("\n")[1];
    console.log(result)
    res.send(result);
  })

})

// dynamic analysis route

app.get('/dynamic/:fileName', (req, res) => {

  //starts the python script and give it the path of the file to analyze as argument
  const process = spawn('python3',['/home/geoffryaf/Desktop/MDP/VxAPI-master/vxapi.py', 'submit_file',`${__dirname}/public/${req.params.fileName}`, '120']);

  //when the python script prints a response we get it here
  process.stdout.on('data', function(data) {

    //dividing the data to make it clearer
    const resp = data.toString().split(" ");
    const response = resp[10].substring(0, resp[10].length - 2);
    console.log(response);
    res.send(response);
    })
  })

  app.get('/dynamicReport/:id', (req, res) => {

    //starts the python script and give it the path of the file to analyze as argument
    const process = spawn('python3',['/home/geoffryaf/Desktop/MDP/VxAPI-master/vxapi.py', 'report_get_summary',req.params.id]);
  
    //when the python script prints a response we get it here
    process.stdout.on('data', function(data) {
  
      //dividing the data to make it clearer
      const resp = data.toString()
      console.log(typeof(resp));
      console.log(resp)
      res.end(resp);
      })
    })


app.use('/', indexRouter);
app.use('/users', usersRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
